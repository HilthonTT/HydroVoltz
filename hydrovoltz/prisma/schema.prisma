generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
  
model User {
  id                    String    @id @default(uuid())
  externalUserId        String    @unique

  username              String    @unique
  imageUrl              String    @db.Text
  status                String?   @db.Text

  sentRequests          FriendRequest[] @relation("sentRequest")
  receivedRequest       FriendRequest[] @relation("receivedRequest")

  friendshipsInitiated  Friend[] @relation("initiator")
  friendshipsReceived   Friend[] @relation("initiatedFriend")

  directMessages        DirectMessage[]

  conversationInitied   Conversation[] @relation("userOne")
  conversationReceived  Conversation[] @relation("userTwo")

  blocking              Block[] @relation("Blocking")
  blockedBy             Block[] @relation("BlockedBy")

  callsInitiated        Call[] @relation("userOne")
  callsReceived         Call[] @relation("userTwo")

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@fulltext([username])
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

model FriendRequest {
  id          String   @id @default(uuid())

  status      Status   @default(PENDING)

  receiverId  String
  senderId    String

  receiver    User     @relation("sentRequest", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User     @relation("receivedRequest", fields: [senderId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([receiverId])
  @@index([senderId])
}

model Friend {
  id            String @id @default(uuid())
  
  initiator     User     @relation("initiator", fields: [initiatorId], references: [id])
  initiatorId   String

  friend        User     @relation("initiatedFriend", fields: [friendId], references: [id])
  friendId      String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([initiatorId])
  @@index([friendId])
  @@unique([initiatorId, friendId])
}

model DirectMessage {
  id              String @id @default(uuid())
  content         String @db.Text
  fileUrl         String? @db.Text

  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([conversationId])
}

model Conversation {
  id              String @id @default(uuid())

  userOneId       String
  userOne         User @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId       String
  userTwo         User @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessages  DirectMessage[]

  @@index([userOneId])
  @@index([userTwoId])

  @@unique([userOneId, userTwoId])
}

model Call {
  id          String @id @default(uuid())

  userOneId   String
  userOne     User @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId   String
  userTwo     User @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  lastCalled  DateTime @default(now())

  @@index([userOneId])
  @@index([userTwoId])

  @@unique([userOneId, userTwoId])
}

model Block {
  id        String @id @default(uuid())

  blockerId String
  blockedId String

  blocker   User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User @relation(name: "BlockedBy",  fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockedId, blockerId])
  @@index([blockedId])
  @@index([blockerId])
}